- investigate why we seem to lose contact with VMs when restarting libvirtd (dhcp/dnsmasq? ebtables?)
- libvirtd watchdog + alert
- remove "VM stop" on VM deletion?
- add "since" info on Operations? (and add do action itself, not only vm name?)
- add --revision to rebuild command
- remove the need to supply the VM name for redefine command?
  - pro: sanity check for a dangerous op
  - cons: looks confusing to the user, change controller logic
- hide SSH proxy + API call log from global target? (noisy)
  - SSH Proxy: 1.2.3.4:12345 (proxy_ssh_extra_keys_file) nosee@myvm
  - SSH Proxy: dial nosee@10.104.20.0
  - API call: 1.2.3.4 GET /log (key: foobar)
  - client downloaded xxx.qcow2
- shortcut for "do action" (ex: mulch open xyz) with completion ?
- add 'env' to mulchd.toml? (overridden by VM's env directive)
- 'vm infos' command: add domains? add IP?
- server status: add uptime
- flag for compression / no compression on "vm backup"
- check 'nwfilter-dumpxml clean-traffic' / libvirt-daemon-config-nwfilter during install?
- challenge based auth?
- rights / limited access
- mulchd should be able to run with a remote libvirtd (StoragePath disallow this, currently)
- support passphrase for Mulch SSH key?
- move SSH Keys and MulchSuperUser to VM level?
- check for missing response.Body.Close() (or things like that)

- change HTTP code from 200 to 4XX in controllers when things fails (ex: req.Stream.Failure)
    - in client, make the non-200 error message silent in stream mode?

- check connection and access rights
- differentiate "rights issues" from "libvirtd not running" issues
