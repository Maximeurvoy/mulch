package topics

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"

	"github.com/Xfennec/mulch/common"
	"github.com/spf13/cobra"
)

type sshConfigCmdDataStruct struct {
	hostname    string
	vmList      *common.APIVmListEntries
	privKeyPath string
}

var sshConfigCmdData sshConfigCmdDataStruct

//  sshConfigCmd represents the "ssh-config" command
var sshConfigCmd = &cobra.Command{
	Use:   "ssh-config",
	Short: "Update local SSH config",
	Long: `Create or update your locale SSH config with aliases, allowing you to
use usual ssh/scp/sftp/… commands directly to your VMs without any
aditionnal configuration:

ssh vm-mulch
scp file vm-mulch:
…
`,
	Args: cobra.NoArgs,
	Run: func(cmd *cobra.Command, args []string) {
		err := CreateSSHMulchDir()
		if err != nil {
			log.Fatal(err.Error())
		}

		hostname, err := GetSSHHost()
		if err != nil {
			log.Fatal(err.Error())
		}
		sshConfigCmdData.hostname = hostname

		call := globalAPI.NewCall("GET", "/sshpair", map[string]string{})
		call.JSONCallback = sshConfigCmdPairCB
		call.Do()
	},
}

func sshConfigCmdPairCB(reader io.Reader) {
	var data common.APISSHPair
	dec := json.NewDecoder(reader)
	err := dec.Decode(&data)
	if err != nil {
		log.Fatal(err.Error())
	}
	// save files using current server name
	privFilePath := GetSSHPath(mulchSubDir + sshKeyPrefix + globalConfig.Server.Name)
	pubFilePath := privFilePath + ".pub"
	sshConfigCmdData.privKeyPath = privFilePath

	err = ioutil.WriteFile(privFilePath, []byte(data.Private), 0600)
	if err != nil {
		log.Fatal(err.Error())
	}

	err = ioutil.WriteFile(pubFilePath, []byte(data.Public), 0644)
	if err != nil {
		log.Fatal(err.Error())
	}

	call := globalAPI.NewCall("GET", "/vm", map[string]string{})
	call.JSONCallback = sshConfigCmdVMListCB
	call.Do()
}

func sshConfigCmdVMListCB(reader io.Reader) {
	var data common.APIVmListEntries
	dec := json.NewDecoder(reader)
	err := dec.Decode(&data)
	if err != nil {
		log.Fatal(err.Error())
	}

	if len(data) == 0 {
		fmt.Printf("Currently, no VM exists. You may use 'mulch vm create'.\n")
		return
	}

	sshConfigCmdData.vmList = &data

	err = sshConfigCmdGenerate(&sshConfigCmdData)
	if err != nil {
		log.Fatal(err.Error())
	}
}

func sshConfigCmdGenerate(conf *sshConfigCmdDataStruct) error {
	const includeString = "Include mulch/aliases_*.conf"
	configPath := GetSSHPath("config")
	sampleContent := `# Generated once by mulch client, feel free to edit.

Include mulch/aliases_*.conf

# do not spread our ssh keys to other hosts
Host *
    IdentitiesOnly yes
`

	includeIsHere, _ := common.FileContains(configPath, includeString)
	if !includeIsHere {
		if !common.PathExist(configPath) {
			err := ioutil.WriteFile(configPath, []byte(sampleContent), 0600)
			if err != nil {
				log.Fatal(err.Error())
			}
		} else {
			fmt.Printf(`Warning: in order to use aliases, you should add the following line
to your SSH config file '%s':
---
%s
---
`, configPath, includeString)
		}
	}

	filename := GetSSHPath(mulchSubDir + "aliases_" + globalConfig.Server.Name + ".conf")
	file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return err
	}
	defer file.Close()

	file.WriteString("# Generated by 'mulch ssh-config' command, do not modify manually.\n# Run the command again to refresh.\n\n")

	fmt.Println("Generated aliases:")
	for _, vm := range *conf.vmList {
		aliasName := vm.Name + "-" + globalConfig.Server.Name
		fmt.Printf("  %s\n", aliasName)
		file.WriteString(fmt.Sprintf("Host %s\n", aliasName))
		file.WriteString(fmt.Sprintf("    HostName %s\n", conf.hostname))
		file.WriteString(fmt.Sprintf("    IdentityFile %s\n", conf.privKeyPath))
		file.WriteString(fmt.Sprintf("    Port %d\n", sshPort))
		file.WriteString(fmt.Sprintf("    User %s@%s\n", vm.SuperUser, vm.Name))
		file.WriteString(fmt.Sprintf("\n"))
	}

	return nil
}

func init() {
	rootCmd.AddCommand(sshConfigCmd)
}
